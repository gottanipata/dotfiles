# 基準
# あとで読みこんでも問題ないものについて
# - keymaping
# - あとから実行する系
##################
# git
##################
[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]] # git command from vim
repo = 'tpope/vim-fugitive'
hook_add = '''
  nnoremap [fugitive]  <Nop>
  nmap <Leader>g [fugitive]
  nnoremap <silent> [fugitive]s :Gstatus<CR><C-w>T:h Fugitive<CR>233<S-G>
  nnoremap <silent> [fugitive]a :Gwrite<CR>
  nnoremap <silent> [fugitive]c :Gcommit-v<CR>
  nnoremap <silent> [fugitive]b :Gblame<CR>
  nnoremap <silent> [fugitive]d :Gdiff<CR>
  nnoremap <silent> [fugitive]h :Glog<CR>
  nnoremap <silent> [fugitive]m :Gstatus<CR>:normal ca<CR>:wq
  nnoremap <silent> [fugitive]r :bufdo e!<CR>

'''
##################
# nerdtree
##################
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  map <Leader>n <plug>NERDTreeTabsToggle<CR>
  map <Leader>f <plug>NERDTreeFind<CR>
'''

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

##################
# enhance keybind, mapping
##################
[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
  let g:ctrlp_map = ''
  nmap <Leader>p :CtrlP<CR>
  nmap <Leader>P :CtrlPClearCache<CR>
  let g:ctrlp_show_hidden = 1
  let g:ctrlp_by_filename = 1
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
'''

[[plugins]]
repo = 'mileszs/ack.vim'
if = '''executable('ag')'''
hook_add = '''
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
'''

[[plugins]]
repo = 'terryma/vim-expand-region'
hook_add = '''
  vmap v <Plug>(expand_region_expand)
  vmap <C-v> <Plug>(expand_region_shrink)
  let g:expand_region_text_objects = {
      \ 'iw'  :0,
      \ 'iW'  :0,
      \ 'i"'  :1,
      \ 'ib'  :1,
      \ 'iB'  :1
\  }
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
  nmap <Leader>b <Plug>(openbrowser-smart-search)
  vmap <Leader>b <Plug>(openbrowser-smart-search)
'''
[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
  let g:winresizer_start_key = '<C-(>'
  let g:winresizer_gui_start_key = '<C-)>'
  noremap <Leader>w :WinResizerStartResize<CR>
'''

[[plugins]] # camelCase to snake_case
repo = 'tpope/vim-abolish'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'
hook_add = '''
  let g:multi_cursor_quit_key = '<C-C>'
  " disable syntax check
  function! s:multiple_cursors_before()
    if exists(':ALEDisableBuffer')==2
        exe 'ALEDisableBuffer'
    endif
    if exists(':CocDisable')==2
        exe 'CocDisable'
    endif
endfunction

function! s:multiple_cursors_after()
    if exists(':ALEEnableBuffer')==2
        exe 'ALEEnableBuffer'
    endif
    if exists(':CocEnable')==2
        exe 'CocEnable'
    endif
endfunction

augroup multiple_cursors
    autocmd User MultipleCursorsPre  call s:multiple_cursors_before()
    autocmd User MultipleCursorsPost call s:multiple_cursors_after()
augroup END
'''


##################
# vim拡張: 見えない系
##################
[[plugins]]
repo = 'vim-scripts/vim-auto-save'
hook_add = '''
  let g:auto_save = 1  " enable AutoSave on Vim startup
  let g:auto_save_no_updatetime = 1
  let g:auto_save_in_insert_mode = 0
  let g:autosave_time = 2
'''

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'rhysd/accelerated-jk'
hook_add = '''
  nmap j <Plug>(accelerated_jk_gj_position)
  nmap k <Plug>(accelerated_jk_gk_position)
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  nnoremap <Leader>q :QuickRun<CR>
'''

[[plugins]]
repo  = 'Shougo/vimproc.vim'
build = 'make'

##################
# complete
##################
[[plugins]]
repo = 'Shougo/neocomplete.vim'

hook_add = '''
  let g:neocomplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
  " snippet Plugin key-mappings.
  " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  imap <C-j>     <Plug>(neosnippet_expand_or_jump)
  smap <C-j>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-j>     <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  "imap <expr><TAB>
  " \ pumvisible() ? "\<C-n>" :
  " \ neosnippet#expandable_or_jumpable() ?
  " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  " For conceal markers.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'


##################
# vim-tags
##################
[[plugins]]
repo = 'szw/vim-tags'

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
  nnoremap <Leader>t :TagbarToggle<CR>
  let g:tagbar_type_ruby = {
    \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
    \ ]
  \ }
'''

[[plugins]]
repo = 'ervandew/supertab' # methods list with ctags
