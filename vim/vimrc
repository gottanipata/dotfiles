let NERDTreeShowHidden=1
set encoding=utf-8
" set fileencodings=uiso-2022-jp,euc-jp,sjis,tf-8
let mapleader=" "
set updatetime=1000

" ---------- start to help
" visualmode
" g <C-g>: show line info
"
" !!!!! 大文字じゃないとだめみたい
" set termkey=<A-w>
" tmap <C-w> N : normal mode
" noremap <C-w>: 'j-w>N

" ---------- end of help
"ノーマル	gf	カーソル下に書かれたテキストと同じ名前のファイルを開く
"ノーマル	gF
"gf と同じだが、ファイルを開くときに行数も指定できる
"ビジュアル	gf	選択したテキストと同じ名前のファイルを開く
"ノーマル	Control-w f	カーソル下に書かれたテキストと同じ名前のファイルを、新しいウィンドウで開く
"ビジュアル	Control-w f	選択したテキストと同じ名前のファイルを、新しいウィンドウで開く
"
" 移動系
"
" { 段落毎に上へ
" } 段落毎に下へ
" ge語の末尾に戻る
" ---------- start to  display setting
" let mapleader = “\<Space>”
" codeinfo
set clipboard+=unnamed
set title
set number
set wrap " 折り返しする
set ruler " カーソルが何行目の何列目に置かれているかを表示する
set laststatus=2 " ファイル名を表示する

set listchars=tab:»-,eol:↲,extends:»,precedes:«,nbsp:% "trail:-,
set list

" indentation
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab " tabをspaceに変換
set smartindent " 改行時に前のインデントを継続する
set autoindent "改行時に前の行のインデントを継続する

" syntax hilight
" hilight
syntax on
set t_Co=256

""""""""""""""""""""""""""""""""""""""""
" file-type settings
""""""""""""""""""""""""""""""""""""""""
au FileType uml command! uml :!open Google\ Chrome %

""""""""""""""""""""""""""""""""""""""""
" base-config: mapping
""""""""""""""""""""""""""""""""""""""""

" search
set wrapscan "return first result if last
set backspace=indent,eol,start
set ignorecase smartcase " 大文字入力のときのみ区別される
set wrapscan " ファイル先頭から再び検索
set incsearch " 検索時、文字列を入力するごとに検索結果が洗練されていく
set wildmenu " コマンドモードの補完 tabで補完できるようになる
set wildmode=list:longest,full " コマンドラインモードでの補完方法を設定する

set noswapfile " スワップファイルを作成しない
set scrolloff=6 " scroll時のoffset行数

" --------- End of display setting

" fast drawing settings
set synmaxcol=300
set lazyredraw " TODO clipboard利用するときwindow増えると貼れなくなる
set ttyfast
" set re=1 " syntaxのを古くするらしいRuby限定とのこと
" https://vim-jp.org/vimdoc-ja/options.html#'regexpengine'

" auto commands
autocmd BufWritePre * :%s/\s\+$//ge


""""""""""""""""""""""""""""""""""""""""
" plugin setting: hilight
""""""""""""""""""""""""""""""""""""""""
" dobule tap space then highlight the word on cursor
set hlsearch! " *でhilightする
map <ESC><ESC> :noh<CR>

"検索を実行するには通常と同様に/somethingを使う
"csを押し、最初の一致項目を置換して、<Esc>を押す
"n.n.n.n.n.と押して、全ての一致項目を確認しながら置換する
vnoremap <silent> s //e<C-r>=&selection=='exclusive'?'+1':''<CR><CR>
    \:<C-u>call histdel('search',-1)<Bar>let @/=histget('search',-1)<CR>gv
omap s :normal vs<CR>

" ----k-

""""""""""""""""""""""""""""""""""""""""
" dein
""""""""""""""""""""""""""""""""""""""""
source ~/dotfiles/vim/vim_extend/dein.vim

""""""""""""""""""""""""""""""""""""""""
" color-scheme
""""""""""""""""""""""""""""""""""""""""
source ~/dotfiles/vim/color-scheme.vim

""""""""""""""""""""""""""""""""""""""""
" extensions
""""""""""""""""""""""""""""""""""""""""
source ~/dotfiles/vim/vim_extend/continuous-paste.vim
source ~/dotfiles/vim/vim_extend/no_indent_copy.vim
source ~/dotfiles/vim/vim_extend/tab-line.vim

command! Tml :edit ~/dotfiles/vim/vim_extend/dein.toml
command! Vrc :edit ~/.vimrc

autocmd bufnewfile,bufread *.tsx set filetype=typescript.tsx
autocmd bufnewfile,bufread *.jsx set filetype=javascript.jsx
autocmd BufNewFile,BufRead *.fish  set filetype=fish
autocmd BufNewFile,BufRead *.html.slim  set filetype=slim
autocmd BufNewFile,BufRead *.schema  set filetype=ruby
autocmd BufNewFile,BufRead Schemafile  set filetype=ruby

""""""""""""""""""""""""""""""""""""""""
" base-config
""""""""""""""""""""""""""""""""""""""""
source ~/dotfiles/vim/vim_base_config/mapping.vim

" window
set splitbelow " 新しいウィンドウを下に開く
set splitright " 新しいウィンドウを右に開く

" tarminal mode
if has('nvim')
  " Neovim 用
  " TODO splitしたい
  autocmd TermOpen term://* startinsert
  " tnoremap <Esc> <C-\><C-n>
  " noremap :te :split term://fish
  " autocmd WinEnter * if &buftype == 'terminal' | :startinsert | endif
  " tmap <C-W>N <C-\><C-n>
  " tmap <C-W>h <C-W>h
  " TODO 微妙に遅いので、なんとかしたい
  tnoremap <C-w>h <C-\><C-n><C-w>h
  tnoremap <C-w>j <C-\><C-n><C-w>j
  tnoremap <C-w>k <C-\><C-n><C-w>k
  tnoremap <C-w>l <C-\><C-n><C-w>l
  inoremap <C-w>h <C-\><C-n><C-w>h
  inoremap <C-w>j <C-\><C-n><C-w>j
  inoremap <C-w>k <C-\><C-n><C-w>k
  inoremap <C-w>l <C-\><C-n><C-w>l

  " When forcus insert mode
  " https://github.com/neovim/neovim/issues/8816
  let g:previous_window = -1
  function SmartInsert()
    if &buftype == 'terminal'
      if g:previous_window != winnr()
        startinsert
      endif
      let g:previous_window = winnr()
    else
      let g:previous_window = -1
    endif
  endfunction

  au BufEnter * call SmartInsert()
else
  " Vim 用
  tmap <C-W>' <C-W>N
endif
